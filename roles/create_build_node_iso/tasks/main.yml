---
# tasks file for create_build_node_iso
- name: Ensure Ventoy is available
  ansible.builtin.copy:
    src: "{{ lookup('env', 'PWD') }}/{{ artifact_directory }}/ventoy.tar.gz"
    dest: "/var/tmp/ventoy.tar.gz"
  become: false

- name: Ensure Ventory directory exists
  ansible.builtin.file:
    path: /opt/ventoy
    state: directory

- name: Untar the Ventoy
  ansible.builtin.unarchive:
    creates: "/opt/ventoy/Ventoy2Disk.sh"
    dest: "/opt/ventoy"
    mode: u=rwx,g=rwx,o=rx
    owner: root
    group: root
    remote_src: true
    src: "/var/tmp/ventoy.tar.gz"
    extra_opts:
      - '--strip-components=2'

- name: Set Ventoy working directoy fact
  ansible.builtin.set_fact:
    ventoy_working_dir: "/run/media/{{ lookup('env', 'USER') }}/Ventoy"
  become: false

- name: Set dependencies working directoy fact
  ansible.builtin.set_fact:
    dependencies_working_dir: "/run/media/{{ lookup('env', 'USER') }}/dependencies"
  become: false

- name: Ensure ventoy directory exists
  ansible.builtin.file:
    path: "{{ ventoy_working_dir }}/ventoy"
    state: directory
  become: false

- name: Ensure ventoy config is available
  ansible.builtin.copy:
    content: "{{ lookup('template', 'ventoy.json') }}"
    dest: "{{ ventoy_working_dir }}/ventoy/ventoy.json"
    mode: u=rwX,g=rwX,o=-
  become: false

- name: Ensure build directory exists
  ansible.builtin.file:
    path: "/var/tmp/build"
    state: directory
  become: false

- name: Ensure RHEL9 ISO is available locally
  ansible.builtin.uri:
    url: "{{ rhel9_iso_url }}"
    mode: u=rwX,g=rwX,o=-
    dest: "/var/tmp/build"
    decompress: false
    creates: "/var/tmp/build/rhel-9.3-x86_64-dvd.iso"
  become: false
  register: rhel9_iso_download

- name: Check if /var/tmp/build/witness-node.iso exists
  ansible.builtin.stat:
    path: /var/tmp/build/witness-node.iso
  register: witness_node_iso
  failed_when: false

- name: Create ISO
  ansible.builtin.shell:
    cmd: |
      mkksiso -c 'inst.txt' \
      -c 'console=tty0 console=ttyS0,115200' \
      /var/tmp/build/rhel-9.3-x86_64-dvd.iso \
      /var/tmp/build/witness-node.iso
  become: true
  when: "rhel9_iso_download.changed or not witness_node_iso.stat.exists"

- name: Ensure the RHEL ISO is available
  ansible.builtin.copy:
    src: "/var/tmp/build/witness-node.iso"
    dest: "{{ ventoy_working_dir }}/rhel-9.3-x86_64-dvd.iso"
    mode: u=rwX,g=rwX,o=-
  become: true

- name: Ensure the kickstart file is available
  ansible.builtin.copy:
    content: "{{ lookup('template', 'ks.cfg') }}"
    dest: "{{ ventoy_working_dir }}/ventoy/ks.cfg"
    mode: u=rwX,g=rwX,o=-
  become: false

- name: Ensure test content resides in the dependencies directory
  ansible.builtin.copy:
    content: |
      This is a test for copying of the dependencies automatically
    dest: "{{ dependencies_working_dir }}/test.txt"
  become: false

- name: Ensure the run-setup-playbook.sh script exists
  ansible.builtin.copy:
    content: |
      /usr/bin/env bash
      set -eux pipefail

      # Ensure RPM deps are installed
      cd /home/ansible/dependencies/rpms
      dnf install -y ./*.rpm

      # Ensure Python deps are installed
      cd /home/ansible/dependencies/python
      python3 -m pip install --no-index --find-links=. -r requirements.txt

      # Ensure Ansible deps are installed
      cd /home/ansible/dependencies/ansible
      ansible-galaxy install -r requirements.yml

      # Run the setup playbook
      cd /home/ansible/dependencies/deployables-deploy
      ansible-playbook 2-configure-build-node.yaml -vb --vault-password-file ./vault-password

      echo "Witness node is now configured"
    dest: "{{ dependencies_working_dir }}/run-setup-playbook.sh"
    mode: u=rwx,g=rwx,o=rx
  become: false

- name: Final
  ansible.builtin.debug:
    msg: |
      The USB is ready.
      Please plug it into the witness node, and power on the witness node.
