---
# tasks file for vms_deploy
- name: Complete preflight checks
  ansible.builtin.import_tasks:
    file: prerequisites.yml
  when: "vm_os == 'windows'"

- name: Retrieve kubeadmin password
  ansible.builtin.slurp:
    src: /home/ansible/{{ vm_cluster }}/auth/kubeadmin-password
  register: _kubeadmin_password_list
  delegate_to: "{{ groups['witness'][0] }}"
  delegate_facts: false

- name: Set kubeadmin password
  ansible.builtin.set_fact:
    _kubeadmin_password: "{{ _kubeadmin_password_list['content'] | b64decode }}"

- name: Set API URL
  ansible.builtin.set_fact:
    _api_url: "https://api.{{ vm_cluster }}.{{ unid }}.{{ base_domain }}:6443"

- name: Retrieve authentication token
  community.okd.openshift_auth:
    username: "kubeadmin"
    password: "{{ _kubeadmin_password }}"
    host: "{{ _api_url }}"
    validate_certs: false
  register: openshift_auth_results
  delegate_to: "{{ groups['witness'][0] }}"
  delegate_facts: false

- name: ensure projects exist
  kubernetes.core.k8s:
    state: present
    host: "{{ _api_url }}"
    api_key: "{{ openshift_auth_results['openshift_auth']['api_key'] }}"
    validate_certs: false
    resource_definition:
      kind: ProjectRequest
      apiVersion: project.openshift.io/v1
      description: "{{ item.project | upper }} project"
      displayName: "{{ item.project | upper }}"
      metadata:
        name: "{{ item.project }}"
  delegate_to: "{{ groups['witness'][0] }}"
  loop: "{{ vm_network_attachments }}"

- name: Get mirror registry CA certificate
  ansible.builtin.shell:
    cmd: |
      openssl s_client -showcerts -verify 1 \
      -connect {{ groups['witness'][0] }}:8443 < /dev/null 2> /dev/null \
      | awk '/BEGIN CERTIFICATE/&&++k==2,/END CERTIFICATE/'
  register: mirror_registry_certificate
  delegate_to: "{{ groups['witness'][0] }}"

- name: Configure registry certs for the project
  kubernetes.core.k8s:
    state: present
    host: "{{ _api_url }}"
    api_key: "{{ openshift_auth_results['openshift_auth']['api_key'] }}"
    validate_certs: false
    resource_definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: tls-certs
        namespace: "{{ vm_project }}"
      data:
        ca.pem: |
          {{ mirror_registry_certificate.stdout }}
  delegate_to: "{{ groups['witness'][0] }}"

- name: configure VM networks
  kubernetes.core.k8s:
    state: present
    host: "{{ _api_url }}"
    api_key: "{{ openshift_auth_results['openshift_auth']['api_key'] }}"
    validate_certs: false
    resource_definition:
      apiVersion: nmstate.io/v1beta1
      kind: NodeNetworkConfigurationPolicy
      metadata:
        name: "policy-vlan{{ item }}"
      spec:
        desiredState:
          interfaces:
            - name: "bond0.{{ item }}"
              type: vlan
              state: up
              ipv4:
                enabled: false
              ipv6:
                enabled: false
              vlan:
                base-iface: bond0
                id: "{{ item }}"
            - name: "br{{ item }}"
              type: linux-bridge
              state: up
              ipv4:
                enabled: false
              ipv6:
                enabled: false
              bridge:
                options:
                  stp:
                    enabled: false
                port:
                  - name: "bond0.{{ item }}"
  loop: "{{ vm_network_vlans }}"
  delegate_to: "{{ groups['witness'][0] }}"

- name: Configure network attachment definitions
  kubernetes.core.k8s:
    state: present
    host: "{{ _api_url }}"
    api_key: "{{ openshift_auth_results['openshift_auth']['api_key'] }}"
    validate_certs: false
    resource_definition:
      apiVersion: k8s.cni.cncf.io/v1
      kind: NetworkAttachmentDefinition
      metadata:
        annotations:
          k8s.v1.cni.cncf.io/resourceName: "bridge.network.kubevirt.io/br{{ item.1  }}"
        name: "vlan{{ item.1  }}"
        namespace: "{{ item.0.project }}"
      spec:
        config: "{{ _networkattachmentdef | to_json | string }}"
  loop: "{{ vm_network_attachments | subelements('vlans') }}"
  vars:
    _networkattachmentdef:
      name: "vlan{{ item.1  }}"
      cniVersion: 0.3.1
      plugins:
      - type: cnv-bridge
        bridge: "br{{ item.1 }}"
        ipam: {}
      - type: cnv-tuning
  delegate_to: "{{ groups['witness'][0] }}"

- name: Configure unattend file
  kubernetes.core.k8s:
    state: present
    host: "{{ _api_url }}"
    api_key: "{{ openshift_auth_results['openshift_auth']['api_key'] }}"
    validate_certs: false
    resource_definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: windows2k22-autounattend
        namespace: "{{ vm_project }}"
      data:
        autounattend.xml: |
          <?xml version="1.0" encoding="utf-8"?>
          <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
            <settings pass="windowsPE">
              <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <SetupUILanguage>
                  <UILanguage>en-US</UILanguage>
                </SetupUILanguage>
                <InputLocale>0409:00000409</InputLocale>
                <SystemLocale>en-US</SystemLocale>
                <UILanguage>en-US</UILanguage>
                <UserLocale>en-US</UserLocale>
              </component>
              <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <UserData>
                  <AcceptEula>true</AcceptEula>
                </UserData>
              </component>
            </settings>
            <settings pass="oobeSystem">
              <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <InputLocale>0409:00000409</InputLocale>
                <SystemLocale>en-US</SystemLocale>
                <UILanguage>en-US</UILanguage>
                <UILanguageFallback>en-US</UILanguageFallback>
                <UserLocale>en-US</UserLocale>
              </component>
              <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <UserAccounts>
                  <AdministratorPassword>
                    <Value>{{ ansible_password }}</Value>
                    <PlainText>true</PlainText>
                  </AdministratorPassword>
                </UserAccounts>
                <AutoLogon>
                  <Enabled>true</Enabled>
                  <Password>
                    <Value>{{ ansible_password }}</Value>
                    <PlainText>true</PlainText>
                  </Password>
                  <Username>Administrator</Username>
                </AutoLogon>
                <TimeZone>UTC</TimeZone>
                <OOBE>
                  <HideEULAPage>true</HideEULAPage>
                  <HideLocalAccountScreen>true</HideLocalAccountScreen>
                  <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>
                  <HideOnlineAccountScreens>true</HideOnlineAccountScreens>
                  <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
                  <NetworkLocation>Work</NetworkLocation>
                  <ProtectYourPC>3</ProtectYourPC>
                </OOBE>
                <FirstLogonCommands>
                  <SynchronousCommand wcm:action="add">
                    <Order>1</Order>
                    <CommandLine>PowerShell -ExecutionPolicy Bypass -NoProfile F:\post-install.ps1</CommandLine>
                    <Description>Run post-install.ps1 script</Description>
                  </SynchronousCommand>
                </FirstLogonCommands>
              </component>
            </settings>
          </unattend>
        post-install.ps1: |
          # Install virtio guest drivers
          Start-Process msiexec -Wait -ArgumentList '/i E:\virtio-win-gt-x64.msi /qn /passive /norestart'
          # Install qemu guest agent
          Start-Process msiexec -Wait -ArgumentList "/i E:\guest-agent\qemu-ga-x86_64.msi /qn /passive /norestart"
          # Rename cached unattend.xml to avoid it is picked up by sysprep
          mv C:\Windows\Panther\unattend.xml C:\Windows\Panther\unattend.install.xml
          # Eject CD, to avoid that the unattend.xml on the CD is picked up by sysprep
          (New-Object -COMObject Shell.Application).NameSpace(17).ParseName("F:").InvokeVerb("Eject")
  delegate_to: "{{ groups['witness'][0] }}"
  when: "vm_os == 'windows'"

- name: Deploy virtual machine (Windows)
  kubernetes.core.k8s:
    state: present
    host: "{{ _api_url }}"
    api_key: "{{ openshift_auth_results['openshift_auth']['api_key'] }}"
    validate_certs: false
    definition: "{{ lookup('template', 'windows.yaml') }}"
  delegate_to: "{{ groups['witness'][0] }}"
  when: "vm_os == 'windows'"

- name: Deploy virtual machine (RHEL8)
  kubernetes.core.k8s:
    state: present
    host: "{{ _api_url }}"
    api_key: "{{ openshift_auth_results['openshift_auth']['api_key'] }}"
    validate_certs: false
    definition: "{{ lookup('template', 'rhel8.yaml') }}"
  delegate_to: "{{ groups['witness'][0] }}"
  when: "vm_os == 'rhel8'"

- name: Deploy virtual machine (RHEL9)
  kubernetes.core.k8s:
    state: present
    host: "{{ _api_url }}"
    api_key: "{{ openshift_auth_results['openshift_auth']['api_key'] }}"
    validate_certs: false
    definition: "{{ lookup('template', 'rhel9.yaml') }}"
  delegate_to: "{{ groups['witness'][0] }}"
  when: "vm_os == 'rhel9'"