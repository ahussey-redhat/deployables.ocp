---
- name: Configure mirror registry directory
  ansible.builtin.file:
    path: /home/ansible/mirror_registry
    mode: u=rwX,g=rwX,o=-
    owner: root
    group: root
    state: directory
  become: true

- name: Configure mirror registry root directory
  ansible.builtin.file:
    path: /home/ansible/mirror_registry/quay-root
    mode: u=rwX,g=rwX,o=-
    owner: root
    group: root
    state: directory
  become: true

- name: Configure mirror registry storage directory
  ansible.builtin.file:
    path: /home/ansible/mirror_registry/quay-storage
    mode: u=rwX,g=rwX,o=-
    owner: root
    group: root
    state: directory
  become: true

- name: Configure mirror registry storage directory
  ansible.builtin.file:
    path: /home/ansible/mirror_registry/pg-storage
    mode: u=rwX,g=rwX,o=-
    owner: root
    group: root
    state: directory
  become: true

- name: Copy over image archive for initial import
  ansible.builtin.copy:
    src: "{{ inventory_dir }}/{{ artifact_directory }}/archive/mirror_seq1_000000.tar"
    dest: /home/ansible/
    mode: u=rwX,g=rwX,o=rX
    owner: ansible
    group: ansible
  become: false

- name: Deploy the mirror registry
  ansible.builtin.shell:
    cmd: |
      /usr/local/bin/mirror-registry install \
      --quayHostname {{ groups['witness'][0] }} \
      --quayRoot /home/ansible/mirror_registry/quay-root \
      --initUser init \
      --initPassword "{{ mirror_registry_init_password }}" \
      --pgStorage /home/ansible/mirror_registry/pg-storage \
      --quayStorage /home/ansible/mirror_registry/quay-storage \
      --sslCheckSkip \
      --no-color
    creates: /home/ansible/mirror_registry/quay-root/quay-rootCA
  failed_when:
    - "'Quay installed successfully' not in deploy_mirror_registry.stdout"
    - deploy_mirror_registry.rc != 0
  become: true
  register: deploy_mirror_registry
  tags:
    - mirror-deploy

- name: Configure local registry
  ansible.builtin.copy:
    content: |
      [[registry]]
      prefix = "registry.redhat.io"
      location = "{{ groups['witness'][0] }}:8443"
      insecure = true

      [[registry]]
      prefix = "registry.access.redhat.com"
      location = "{{ groups['witness'][0] }}:8443"
      insecure = true

      [[registry]]
      prefix = "quay.io/openshift-release-dev/ocp-v4.0-art-dev"
      location = "{{ groups['witness'][0] }}:8443/openshift/release"
      insecure = true

      [[registry]]
      prefix = "quay.io/openshift-release-dev/ocp-release"
      location = "{{ groups['witness'][0] }}:8443/openshift/release-images"
      insecure = true

      [[registry]]
      location = "{{ groups['witness'][0] }}:8443"
      insecure = true
    dest: /etc/containers/registries.conf.d/010-mirror-registry.conf
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Configure container signature enforcement
  ansible.builtin.copy:
    content: |
      {
          "default": [
              {
                  "type": "insecureAcceptAnything"
              }
          ],
          "transports": {
              "docker": {},
              "docker-daemon": {
                  "": [
                      {
                          "type": "insecureAcceptAnything"
                      }
                  ]
              }
          }
      }
    dest: /etc/containers/policy.json
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Push oc-mirror content to the mirror registry (this may take 30+ minutes)
  ansible.builtin.shell:
    cmd: >-
      /usr/bin/podman login https://{{ groups['witness'][0] }}:8443
      --tls-verify=false
      --username init
      --password "{{ mirror_registry_init_password }}" &&
      /usr/local/bin/oc-mirror
      --dest-skip-tls
      --from=/home/ansible/mirror_seq1_000000.tar
      docker://{{ groups['witness'][0] }}:8443
    creates: /home/ansible/oc-mirror-workspace/publish/.metadata.json
  become: false
  tags:
   - mirror-push

- name: Message
  ansible.builtin.debug:
    msg: |
      You now need to create a pull-secret, by logging into the
      mirror registry -> Account Settings -> Create encrypted password
      -> Docker Configuration -> View init-auth.json.

      Encrypt this as an Ansible Vault variable called "pull_secret".
